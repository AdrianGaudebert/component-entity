!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.ensy=e()}(this,function(){"use strict";function t(e){if(null==e||"object"!=("undefined"==typeof e?"undefined":n(e)))return e;var o;if(e instanceof Date)return o=new Date,o.setTime(e.getTime()),o;if(e instanceof Array){o=[];for(var i=0,r=e.length;i<r;i++)o[i]=t(e[i]);return o}if(e instanceof Object){o={};for(var s in e)e.hasOwnProperty(s)&&(o[s]=t(e[s]));return o}}function e(t){return t&&"[object Function]"==={}.toString.call(t)}var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=(function(){function t(t){this.value=t}function e(e){function n(t,e){return new Promise(function(n,i){var a={key:t,arg:e,resolve:n,reject:i,next:null};s?s=s.next=a:(r=s=a,o(t,e))})}function o(n,r){try{var s=e[n](r),a=s.value;a instanceof t?Promise.resolve(a.value).then(function(t){o("next",t)},function(t){o("throw",t)}):i(s.done?"return":"normal",s.value)}catch(t){i("throw",t)}}function i(t,e){switch(t){case"return":r.resolve({value:e,done:!0});break;case"throw":r.reject(e);break;default:r.resolve({value:e,done:!1})}r=r.next,r?o(r.key,r.arg):s=null}var r,s;this._invoke=n,"function"!=typeof e.return&&(this.return=void 0)}return"function"==typeof Symbol&&Symbol.asyncIterator&&(e.prototype[Symbol.asyncIterator]=function(){return this}),e.prototype.next=function(t){return this._invoke("next",t)},e.prototype.throw=function(t){return this._invoke("throw",t)},e.prototype.return=function(t){return this._invoke("return",t)},{wrap:function(t){return function(){return new e(t.apply(this,arguments))}},await:function(e){return new t(e)}}}(),function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}),i=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),r=function(){function n(t){o(this,n),this.listener=null,t&&e(t.emit)&&(this.listener=t),this.entities=[],this.components={},this.assemblages={},this.entityComponentData={},this.processors=[],this.uid=0}return i(n,[{key:"getUid",value:function(){return this.uid++}},{key:"createEntity",value:function(t,e){return"undefined"==typeof e||null===e?e=this.getUid():e>this.uid&&(this.uid=e),this.addComponentsToEntity(t,e),this.entities.includes(e)||this.entities.push(e),this.listener&&this.listener.emit("entityCreated",e),e}},{key:"removeEntity",value:function(t){for(var e in this.entityComponentData)this.entityComponentData.hasOwnProperty(e)&&this.entityComponentData[e][t]&&delete this.entityComponentData[e][t];return this.entities.splice(this.entities.indexOf(t),1),this.listener&&this.listener.emit("entityCreated",t),this}},{key:"addComponent",value:function(t,e){return this.components[t]=e,this}},{key:"removeComponent",value:function(t){return delete this.components[t],delete this.entityComponentData[t],this}},{key:"getComponentsList",value:function(){return Object.keys(this.components)}},{key:"addComponentsToEntity",value:function(e,n){var o,i,r=this;for(o=e.length-1;o>=0;o--)if(i=e[o],!this.components[i])throw new Error("Trying to use unknown component: "+i);for(o=e.length-1;o>=0;o--){i=e[o],this.entityComponentData[i]||(this.entityComponentData[i]={});var s=null;r.listener?(s={},function(e){var o=t(r.components[i].state);for(var s in o)o.hasOwnProperty(s)&&!function(t){Object.defineProperty(e,t,{get:function(){return o[t]},set:function(e){o[t]=e,r.listener.emit("entityComponentUpdated",n,i)}})}(s)}(s),r.listener.emit("entityComponentAdded",n,i)):s=t(r.components[i].state),s.__id=n,this.entityComponentData[i][n]=s}return this}},{key:"removeComponentsFromEntity",value:function(t,e){var n,o;for(n=t.length-1;n>=0;n--)if(o=t[n],!this.components[o])throw new Error("Trying to use unknown component: "+o);for(n=t.length-1;n>=0;n--)o=t[n],this.entityComponentData[o]&&this.entityComponentData[o][e]&&(delete this.entityComponentData[o][e],this.listener&&this.listener.emit("entityComponentRemoved",e,o));return this}},{key:"getComponentDataForEntity",value:function(t,e){if(!(t in this.components))throw new Error("Trying to use unknown component: "+t);if(!this.entityComponentData.hasOwnProperty(t)||!this.entityComponentData[t].hasOwnProperty(e))throw new Error("No data for component "+t+" and entity "+e);return this.entityComponentData[t][e]}},{key:"updateComponentDataForEntity",value:function(t,e,n){var o=this.getComponentDataForEntity(t,e);for(var i in n)n.hasOwnProperty(i)&&o.hasOwnProperty(i)&&(o[i]=n[i]);return this}},{key:"getComponentsData",value:function(t){if(!(t in this.components))throw new Error("Trying to use unknown component: "+t);return this.entityComponentData.hasOwnProperty(t)?this.entityComponentData[t]:[]}},{key:"entityHasComponent",value:function(t,e){return e in this.components&&(this.entityComponentData.hasOwnProperty(e)&&this.entityComponentData[e].hasOwnProperty(t))}},{key:"addAssemblage",value:function(t,e){return this.assemblages[t]=e,this}},{key:"removeAssemblage",value:function(t){return delete this.assemblages[t],this}},{key:"createEntityFromAssemblage",value:function(t){if(!(t in this.assemblages))throw new Error("Trying to use unknown assemblage: "+t);var e=this.assemblages[t],n=this.createEntity(e.components);for(var o in e.initialState)if(e.initialState.hasOwnProperty(o)){var i=e.initialState[o];this.updateComponentDataForEntity(o,n,i)}return n}},{key:"addProcessor",value:function(t){return this.processors.push(t),this}},{key:"removeProcessor",value:function(t){return this.processors.splice(this.processors.indexOf(t),1),this}},{key:"update",value:function(t){for(var e=0;e<this.processors.length;e++)this.processors[e].update(t);return this}}]),n}();return r});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
